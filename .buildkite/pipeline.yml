steps:
  - label: ":julia: Julia {{matrix.julia}} + CUDA GPU"
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.julia}}"
      - JuliaCI/julia-test#v1:
          test_args: "--quickfail"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - ext
    agents:
      queue: "juliagpu"
      cuda: "*"
    env:
      JULIA_NUM_THREADS: 4
      NNLIB_TEST_CUDA: "true"
      NNLIB_TEST_CPU: "true" # Could be useful to uncover multithreading related issues
                             # Buildkite workers have more threads.
    if: build.message !~ /\[skip tests\]/
    timeout_in_minutes: 180
    matrix:
      setup:
        julia:
          - "1"
          - "nightly"
      adjustments:
        - with:
            julia: "nightly"
          soft_fail: true

  - label: ":julia: Julia 1 + AMD GPU"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.10"
      - JuliaCI/julia-test#v1:
          test_args: "--quickfail"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - ext
    agents:
      queue: "juliagpu"
      rocm: "*"
      rocmgpu: "*"
    timeout_in_minutes: 180
    env:
      JULIA_AMDGPU_CORE_MUST_LOAD: "1"
      JULIA_AMDGPU_HIP_MUST_LOAD: "1"
      JULIA_AMDGPU_DISABLE_ARTIFACTS: "1"
      NNLIB_TEST_AMDGPU: "true"
      NNLIB_TEST_CPU: "false"
      JULIA_NUM_THREADS: 4

  - label: "Benchmarks"
    plugins:
      - JuliaCI/julia#v1:
          version: 1
    env:
      JULIA_NUM_THREADS: 4
    command:
      - julia --project=benchmark -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
      - julia --project=benchmark benchmark/runbenchmarks.jl
      - printf '%b\n' "$(cat benchmark/report.md)" | buildkite-agent annotate --style 'info'
    agents:
      queue: "juliagpu"
    if: build.pull_request.labels includes "benchmark"
    timeout_in_minutes: 30

env:
  SECRET_CODECOV_TOKEN: "IlEMvDI6RciJQr5eX7qBBpHYFAe8+Svf3lNJh9gZi0MeJZQvMZWzHfW/lVncA9d9K+gDBBTv/zwqF86xOaIFLuACNdcGZiGgHS+NGeXN5CEppjqLnqKuaeHmLgJ43jygxRwgF88LhwTGcHG7pmESIp1Bn3Jd23UUv4t8hJLBDF+KJLZMefzCXnEVzfwJYxhJktnKJPA4dOv59w33Vj1x5uCYZbQlLP54IJPBm8UGdXS+JrUX8Z7lhxbkJUi6c+R6cvVBw27uRjF0pUJY26mt1frx8MzTGTOweXTpi+Kc5JhzlokMlan17j6T/b7qMC13IuKopfqu1GhkSBQD3ZhQqA==;U2FsdGVkX19l7JMB48k4oJHLoaqC7/MmvQWmaiBxRN472ZC6AcQ0uCBRy6Fw8tI0YcjIxKDScaBnJ2v/deOfhg=="
